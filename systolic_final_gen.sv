// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar pe, result;


//
// Signals declared top-level.
//

// For $activation_stream.
logic [7:0] L0_activation_stream_a0;

// For $reset.
logic L0_reset_a0;

// For $weight_stream.
logic [7:0] L0_weight_stream_a0;

// For /pe$activation_out.
logic Pe_activation_out_a1 [4 * 4-1:0];

// For /pe$activation_stream.
logic Pe_activation_stream_a0 [4 * 4-1:0];

// For /pe$partial_sum_out.
logic Pe_partial_sum_out_a1 [4 * 4-1:0];

// For /pe$weight.
logic [7:0] Pe_weight_a0 [4 * 4-1:0],
            Pe_weight_a1 [4 * 4-1:0];

// For /pe$weight_stream.
logic Pe_weight_stream_a0 [4 * 4-1:0];

// For /pe|pipe$activation.
logic [7:0] Pe_PIPE_activation_a0 [4 * 4-1:0],
            Pe_PIPE_activation_a1 [4 * 4-1:0],
            Pe_PIPE_activation_a2 [4 * 4-1:0];

// For /pe|pipe$partial_sum.
logic Pe_PIPE_partial_sum_a1 [4 * 4-1:0];

// For /pe|pipe$reset.
logic Pe_PIPE_reset_a0 [4 * 4-1:0];

// For /pe|pipe$weight.
logic [7:0] Pe_PIPE_weight_a0 [4 * 4-1:0];




   //
   // Scope: /pe[4 * 4-1:0]
   //
   for (pe = 0; pe <= 4 * 4-1; pe++) begin : L1gen_Pe
      // Staging of signal $activation_out, which had no assignment.
      assign Pe_activation_out_a1[pe] = 'x;

      // Staging of signal $activation_stream, which had no assignment.
      assign Pe_activation_stream_a0[pe] = 'x;

      // Staging of signal $partial_sum_out, which had no assignment.
      assign Pe_partial_sum_out_a1[pe] = 'x;

      // Staging of $weight.
      always_ff @(posedge clk) Pe_weight_a1[pe][7:0] <= Pe_weight_a0[pe][7:0];

      // Staging of signal $weight_stream, which had no assignment.
      assign Pe_weight_stream_a0[pe] = 'x;


      //
      // Scope: |pipe
      //

         // Staging of signal $activation, which had no assignment.
         assign Pe_PIPE_activation_a0[pe][7:0] = 'x;
         always_ff @(posedge clk) Pe_PIPE_activation_a1[pe][7:0] <= Pe_PIPE_activation_a0[pe][7:0];
         always_ff @(posedge clk) Pe_PIPE_activation_a2[pe][7:0] <= Pe_PIPE_activation_a1[pe][7:0];

         // Staging of $output.
         always_ff @(posedge clk) L1_Pe[pe].L1_PIPE_output_a1[31:0] <= L1_Pe[pe].L1_PIPE_output_a0[31:0];

         // Staging of signal $partial_sum, which had no assignment.
         assign Pe_PIPE_partial_sum_a1[pe] = 'x;

         // Staging of signal $reset, which had no assignment.
         assign Pe_PIPE_reset_a0[pe] = 'x;

         // Staging of signal $weight, which had no assignment.
         assign Pe_PIPE_weight_a0[pe][7:0] = 'x;


   end

